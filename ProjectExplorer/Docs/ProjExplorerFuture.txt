Project Explorer Future Improvements

Small things
	Define what to do with other game states (start and the other)

Create issues with this sections
	Game State 1
		Put limitations on keys callback function  based on current game state

Sequence
	ok - Finish Selfmade Interface 1
	ok - Chunk and Chunk Loader
	Sun ( Day and Night cycle with Diffuse lighting )
	Save worldmap to file
	Load worldmap from file
	Ray-Picking ( Object interaction )
	Instancing
	Tinker more with terrain generation ( sand, water, trees and vegetation, octaves )

Bugs
	ChunkHandler's updateVisibleChunks is not updating correctly visible chunks on negative chunks. Probably an issue with negatives and visibleChunkSide ( Which is always possible )

	When the sun is on the horizon, block faces facing it directly should get dark as soon as the sun sets, but as their angle to the sun is minimal, they are very bright until the sun gets to X == playerPos.x

	Check out why generating terraing with a higher chunkSize ( Tested with chunkSize = 32 ) yields in a strange hole in every chunk

Later

Increase player camera position as the blocks seem very big now

Code Improvement 1.0
	Create pointers to objects instead of the object itself ( If in doubt, check Breakout to see how it's done )

Code Improvement 1.1
	Following that idea of having a different function to handle each type of movement using the bool key[] array. Create a bool action[] and use check for this action in a similar way I'm doing it currently. Try to use a std::pair<bool, bool>

Code Improvement 1.2
	Create game class
	Get a similar structure from Breakout
	Command game object through main class

Code Improvement 1.3
	Create player class
	Will have everything related to the player ( Vars and functions )

Trees 1.0
	Select random positions and add this positions to the trees vector
	A tree object is composed of blocks which have the position of the logs and the position of the leaves
	Cannot be placed on stone

Trees 1.1
	Try to create a little randomness to the tree's format. Maybe pre-create various trees, although this would not be an optimal solution
	
World 1.1
	Test the following and check which one is better
		Chose wether stone or grass based on the noise value ( between 0-1 )
		Put stones only higher than determined height

Elevator ( Dynamic Heighmap test)

Physics 1.2
	Check if player is jumping while moving towards a wall. It can still move up and get to the block in case it passes the heightValue of that block

Chunk and ChunkHandler (Important)

Terrain/World 1
	Create sand blocks below a certain height

	Test the following and check which one is better
		Chose wether stone or grass based on the noise value ( between 0-1 )
		Put stones only higher than determined height

Terrain/World 1.1
	Check out noise generation used by this video: https://www.youtube.com/watch?v=GTAqjyG2oOc

Terrain/World 1.2
	Create water blocks a few blocks below sand blocks ( Water will not affect the heightmap )
	Condition to add water - if (currentY > heightValue && currentY <= waterHeightThreshold)
	Sand blocks should still be the floor
	Player can go through water ( as standard )

Terrain/World 1.3
	When creating blocks in very high positions, create blocks below them until there's a block around ( Add this to a auxiliarBlocks vector, which will contain all this kind of blocks )
	When creating auxiliarBlocks, count how many I'm adding in one column. Up to two blocks, add dirt blocks and more than 2 add stone blocks

Terrain/World 3
	Add trees
	Add walkthroughable vegetation ( similar to grass from LearnOpenGL tutorial )

Terrain/World 4
	Research on how to have more control on the terrain generation ( octaves? )
	Search for other implementations
	Try to understand it deeply and do my own mods
	( Check links on oneTab - Very cool stuff )

GLFW 1
	Full screen ( Switch between windowed and fullscreen ) ( http://www.glfw.org/docs/latest/window_guide.html )

GLFW 1.1
	Changeable resolution ( Through options menu )
		Must update position of all UIElements

Combat
	Check if weapon collided with any monster that belongs to the current chunk and the 8 chunks in the surrounding

Clean input - Put most things on an treatInput function

Transformations tests
	Make a block rotate on its own
	Make a block move based on time and update heightMap as block moves
	Make two blocks related. Moving one will also move the other

World 1
	Should I store the world in a 2d array, or in a vector
	To remember - When blocks get a more than 1 height difference, there should be blocks to hide the empty space

Save and Load 1
	Create a MENU_STATE enum
	When setting option to go to menu, set gs to MENU and set ms to given menu, i.e. OPTIONS ( Save, load, options, exit)
	Save will save the map to a standard file and directory
	Load will load the map from the standard file and directory

Save and Load 2
	When clicking to save, enter ms = SAVE, load will have ms = LOAD
	Save will display a list of all saved maps. Map can be overwritten
	Load will display a list of all maps that can be loaded
	Then, when I create the inventory screen, it'll become a ms = INVENTORY
	For a crafting table, ms = CRAFTING_TABLE_WOOD, ms = CRAFTING_TABLE_STONE, just to get the idea

Interface 1.5
	Create options label in the menu context

Interface Engine 2.1
	Create rectangle with text behind
	Able to change rect color, alpha and text color and alpha

Interface Engine 2.2
	ok - Create Label class
	ok - The class will have everything needed to render a text
	ok - Will have a render function, shader, VAO and VBO and stuff
	ok - Check mouse collision with object
	ok - Has position and size parameters

Interface Engine 2.3
	Create Button class
	The class will have everything needed to render a text
	Will have a render function, shader, VAO and VBO and stuff
	Check mouse collision with objects
	Has position and size parameters
	Will store a pointer to a function ( Which will be its event )
		The function will be at main.cpp
		When check collision is true, call method and pass its parameters

Interface Engine 2.4
	Improve Label's BBox - It's a little small right now
	Button changes color for a small moment when clicked

Selfmade Interface 5
	Create UI class that will be the class that commands everything that is UI related
	Create UIElement class that will be the super class of the Label and Button classes. This will have common features for both label and button

Text Rendering 1
	Create vector of FT_FACE to store the many types of font (standard, italic, bold)

Player Movement 1
	Press key to increase player's lateral speed
	Limit player's speed when pressing 2 keys at the same time

Game Control 1
	Press key to toggle between fixed day, fixed night, and day-night cycle

Fly 1
	Create ascendVelocity. Create a soft start before reaching maximum ascension speed

Fly 2
	Make FREE_FLY be able to ascend and descend. For this, I must have my camera following the player's position, instead of the contrary

Performance 1
	Investigate why performance dropped after I added a second type of block
	Try to use face culling ( Should render only what's visible). Read Face Culling tutorial on https://learnopengl.com/#!Advanced-OpenGL/Face-culling

Code Improvement 1
	Put key processing code on another place. Probably a ProcessKeys() function. I have an issue with pressing simultaneous keys right now

	In Render function, call RenderGeometry and RenderUI functions

	Clean callback methods

Better Data Storage 1
	Maintain world block positions on a vector which value is the type of the block to be placed
	
Better Data Storage 2 - Needed only after saving map to file
	Create a compression algorithm that checks if I have repeated blocks of the same type
		Instead of 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ( Which represents a lot of stone, for example ), do this 11x0, which means that there're 11 stone blocks in sequence.
		This serves to dramatically reduce the map storage space in the Hard Disk
		
Physics 3
	Make the player slide on a wall in case a block is higher in Y than the player
		When running towards a wall in an angle, the player still moves a little bit in the direction pointed, but does not cross the wall
	Check player stopping at higher blocks after jumping
	
Improve heightMap 2
	Create invisible wall on the sides of the world, so that the player can't fall and go somewhere below the heightMap
	Change heightMap structure from vector to map - Probably will have to build a custom map since the standard doesn't support glm::vec3 type as key
	Use glm::vec3.y as heightMap value and delete the heightValues vector

Improve heightMap 3
	Research online how this is done correctly
	
Improve FPS counter 
	Get some average algorithm
	Make FPS show decimal units too - Get remaining and divide it

Split camera movement from player movement
	Right now, the players position is a only copy of the camera position. The idea is to make the player position a different thing from the camera
	
Logger
	Add FPS to log
	Add all possible failures to the log
	
Soundtrack
	Add better soundtrack
	Add sound when player is moving
	Add soung when player jumps
	Add sound when player interacts with other objects
	
Cube Map
	Must read the tutorial first
	Create a skybox (Maybe I should only render the background blue .-. )
	
Instanced Rendering
	Render a lot of cubes in only one render call
	Could be able to draw a lot more cubes

Space Partition Algorithms
	Used for lighter collision detection
	
Reset game state
	Press key and reset all game variables

Shadows
Multiple light points