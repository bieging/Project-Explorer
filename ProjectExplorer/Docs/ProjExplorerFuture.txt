Project Explorer Future Improvements

Small things
	Define what to do with other game states (start and the other)

Create issues with this sections
	Game State 1
		Put limitations on keys callback function  based on current game state

Sequence
	Finish Selfmade Interface 1
	Chunk and Chunk Loader
	Save worldmap to file
	Load worldmap from file
	Sun ( Day and Night cycle with Diffuse lighting )
	Ray-Picking ( Object interaction )
	Tinker more with terrain generation ( sand, water, trees and vegetation )

Later

Increase player camera position as the blocks seem very big now

Chunk and ChunkHandler (Important)

Terrain 1
	Create sand blocks below a certain height

Terrain 1.1
	Check out noise generation used by this video: https://www.youtube.com/watch?v=GTAqjyG2oOc

Terrain 2
	Create water blocks a few blocks below sand blocks
	Sand blocks should still be the floor
	Player can go through water ( as standard )

Terrain 3
	Add trees
	Add walkthroughable vegetation ( similar to grass from LearnOpenGL tutorial )

Terrain 4
	Research on how to have more control on the terrain generation ( octaves? )
	Search for other implementations
	Try to understand it deeply and do my own mods
	( Check links on oneTab - Very cool stuff )

GLFW 1
	Full screen ( Switch between windowed and fullscreen ) ( http://www.glfw.org/docs/latest/window_guide.html )

GLFW 1.1
	CHangeable resolution ( Through options menu )

Combat
	Check if weapon collided with any monster that belongs to the current chunk and the 8 chunks in the surrounding

Clean input - Put most things on an treatInput function

Transformations tests
	Make a block rotate on its own
	Make a block move based on time and update heightMap as block moves
	Make two blocks related. Moving one will also move the other

World 1
	Should I store the world in a 2d array, or in a vector
	To remember - When blocks get a more than 1 height difference, there should be blocks to hide the empty space

Save and Load 1
	Create a MENU_STATE enum
	When setting option to go to menu, set gs to MENU and set ms to given menu, i.e. OPTIONS ( Save, load, options, exit)
	Save will save the map to a standard file and directory
	Load will load the map from the standard file and directory

Save and Load 2
	When clicking to save, enter ms = SAVE, load will have ms = LOAD
	Save will display a list of all saved maps. Map can be overwritten
	Load will display a list of all maps that can be loaded
	Then, when I create the inventory screen, it'll become a ms = INVENTORY
	For a crafting table, ms = CRAFTING_TABLE_WOOD, ms = CRAFTING_TABLE_STONE, just to get the idea

Selfmade Interface 2
	Create rectangle with text behind
	Able to change rect color, alpha and text color and alpha

Selfmade Interface 3
	ok - Create Label class
	ok - The class will have everything needed to render a text
	ok - Will have a render function, shader, VAO and VBO and stuff
	Check mouse collision with object
	ok - Has position and size parameters

Selfmade Interface 4
	Create Button class
	The class will have everything needed to render a text
	Will have a render function, shader, VAO and VBO and stuff
	Check mouse collision with objects
	Has position and size parameters
	Will store a pointer to a function ( Which will be its event )
		The function will be at main.cpp
		When check collision is true, call method and pass its parameters

Selfmade Interface 5
	Improve BBox - It's a little small right now
	Create UI class that will be the class that commands everything that is UI related
	Create UIElement class that will be the super class of the Label and Button classes. This will have common features for both label and button

Text Rendering 1
	Create vector of FT_FACE to store the many types of font (standard, italic, bold)

Player Movement 1
	Press key to increase player's lateral speed
	Limit player's speed when pressing 2 keys at the same time

Game Control 1
	Press key to toggle between fixed day, fixed night, and day-night cycle

Fly 1
	Create ascendVelocity. Create a soft start before reaching maximum ascension speed

Fly 2
	Make FREE_FLY be able to ascend and descend. For this, I must have my camera following the player's position, instead of the contrary

Performance 1
	Investigate why performance dropped after I added a second type of block
	Try to use face culling ( Should render only what's visible). Read Face Culling tutorial on https://learnopengl.com/#!Advanced-OpenGL/Face-culling

Code Improvement 1
	Put key processing code on another place. Probably a ProcessKeys() function. I have an issue with pressing simultaneous keys right now

	In Render function, call RenderGeometry and RenderUI functions

	Clean callback methods

Better Data Storage 1
	Maintain world block positions on a vector which value is the type of the block to be placed
	
Better Data Storage 2 - Needed only after saving map to file
	Create a compression algorithm that checks if I have repeated blocks of the same type
		Instead of 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ( Which represents a lot of stone, for example ), do this 11x0, which means that there're 11 stone blocks in sequence.
		This serves to dramatically reduce the map storage space in the Hard Disk
		
Physics 3
	Make the player slide on a wall in case a block is higher in Y than the player
		When running towards a wall in an angle, the player still moves a little bit in the direction pointed, but does not cross the wall
	Check player stopping at higher blocks after jumping
	
Improve heightMap 2
	Create invisible wall on the sides of the world, so that the player can't fall and go somewhere below the heightMap
	Change heightMap structure from vector to map - Probably will have to build a custom map since the standard doesn't support glm::vec3 type as key
	Use glm::vec3.y as heightMap value and delete the heightValues vector

Improve heightMap 3
	Research online how this is done correctly
	
Improve FPS counter 
	Get some average algorithm
	Make FPS show decimal units too - Get remaining and divide it

Split camera movement from player movement
	Right now, the players position is a only copy of the camera position. The idea is to make the player position a different thing from the camera
	
Logger
	Add FPS to log
	Add all possible failures to the log
	
Soundtrack
	Add better soundtrack
	Add sound when player is moving
	Add soung when player jumps
	Add sound when player interacts with other objects
	
Cube Map
	Must read the tutorial first
	Create a skybox (Maybe I should only render the background blue .-. )
	
Instanced Rendering
	Render a lot of cubes in only one render call
	Could be able to draw a lot more cubes

Space Partition Algorithms
	Used for lighter collision detection
	
Reset game state
	Press key and reset all game variables